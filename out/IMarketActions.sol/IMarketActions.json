{"abi":[{"type":"function","name":"allocate","inputs":[{"name":"poolId","type":"bytes32","internalType":"bytes32"},{"name":"recipient","type":"address","internalType":"address"},{"name":"delQuote","type":"uint256","internalType":"uint256"},{"name":"delBase","type":"uint256","internalType":"uint256"},{"name":"fromMargin","type":"bool","internalType":"bool"},{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"delLiquidity","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"create","inputs":[{"name":"strike","type":"uint128","internalType":"uint128"},{"name":"sigma","type":"uint32","internalType":"uint32"},{"name":"maturity","type":"uint32","internalType":"uint32"},{"name":"gamma","type":"uint32","internalType":"uint32"},{"name":"quotePerBase","type":"uint256","internalType":"uint256"},{"name":"delLiquidity","type":"uint256","internalType":"uint256"},{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"poolId","type":"bytes32","internalType":"bytes32"},{"name":"delQuote","type":"uint256","internalType":"uint256"},{"name":"delBase","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"deposit","inputs":[{"name":"recipient","type":"address","internalType":"address"},{"name":"delQuote","type":"uint256","internalType":"uint256"},{"name":"delBase","type":"uint256","internalType":"uint256"},{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"remove","inputs":[{"name":"poolId","type":"bytes32","internalType":"bytes32"},{"name":"delLiquidity","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"delQuote","type":"uint256","internalType":"uint256"},{"name":"delBase","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"swap","inputs":[{"name":"recipient","type":"address","internalType":"address"},{"name":"poolId","type":"bytes32","internalType":"bytes32"},{"name":"quoteForBase","type":"bool","internalType":"bool"},{"name":"deltaIn","type":"uint256","internalType":"uint256"},{"name":"deltaOut","type":"uint256","internalType":"uint256"},{"name":"fromMargin","type":"bool","internalType":"bool"},{"name":"toMargin","type":"bool","internalType":"bool"},{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"updateLastTimestamp","inputs":[{"name":"poolId","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"lastTimestamp","type":"uint32","internalType":"uint32"}],"stateMutability":"nonpayable"},{"type":"function","name":"withdraw","inputs":[{"name":"recipient","type":"address","internalType":"address"},{"name":"delQuote","type":"uint256","internalType":"uint256"},{"name":"delBase","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"allocate(bytes32,address,uint256,uint256,bool,bytes)":"d2957b8f","create(uint128,uint32,uint32,uint32,uint256,uint256,bytes)":"be00763a","deposit(address,uint256,uint256,bytes)":"9e48ff5a","remove(bytes32,uint256)":"9f8cfade","swap(address,bytes32,bool,uint256,uint256,bool,bool,bytes)":"ca28fcd6","updateLastTimestamp(bytes32)":"11f99086","withdraw(address,uint256,uint256)":"b5c5f672"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"delQuote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delBase\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"fromMargin\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"allocate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"delLiquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"strike\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"sigma\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maturity\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"gamma\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"quotePerBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"delQuote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delBase\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"delQuote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delBase\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"delLiquidity\",\"type\":\"uint256\"}],\"name\":\"remove\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"delQuote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delBase\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"quoteForBase\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"deltaIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deltaOut\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"fromMargin\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"toMargin\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"}],\"name\":\"updateLastTimestamp\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"lastTimestamp\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"delQuote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delBase\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Primitive\",\"kind\":\"dev\",\"methods\":{\"allocate(bytes32,address,uint256,uint256,bool,bytes)\":{\"params\":{\"data\":\"Arbitrary data that is passed to the allocateCallback function\",\"delBase\":\"Amount of base tokens to add\",\"delQuote\":\"Amount of quote tokens to add\",\"fromMargin\":\"Whether the `msg.sender` pays with their margin balance, or must send tokens\",\"poolId\":\"Keccak256 hash of engine address, strike, sigma, maturity, and gamma\",\"recipient\":\"Address to give the allocated liquidity to\"},\"returns\":{\"delLiquidity\":\"Amount of liquidity given to `recipient`\"}},\"create(uint128,uint32,uint32,uint32,uint256,uint256,bytes)\":{\"params\":{\"data\":\"Arbitrary data that is passed to the createCallback function\",\"delLiquidity\":\"Amount of liquidity units to allocate to the curve, wei value with 18 decimals of precision\",\"gamma\":\"Multiplied against swap in amounts to apply fee, equal to 1 - fee % but units are in basis points, valid for (9_000, 10_000)\",\"maturity\":\"Timestamp which starts the BUFFER countdown until swaps will cease, in seconds, valid for (block.timestamp, 2^32-1]\",\"quotePerBase\":\"quote reserve per liq. with quote decimals, = 1 - N(d1), d1 = (ln(S/K)+(r*\\u03c3^2/2))/\\u03c3\\u221a\\u03c4, valid for [0, 1e^(quote token decimals))\",\"sigma\":\"AKA Implied Volatility in basis points, determines the price impact of swaps, valid for (1, 10_000_000)\",\"strike\":\"Marginal price of the pool's quote token at maturity, with the same decimals as the base token, valid [0, 2^128-1]\"},\"returns\":{\"delBase\":\"  Total amount of base tokens provided to reserves\",\"delQuote\":\"   Total amount of quote tokens provided to reserves\",\"poolId\":\"     Keccak256 hash of engine address, strike, sigma, maturity, and gamma\"}},\"deposit(address,uint256,uint256,bytes)\":{\"params\":{\"data\":\"Arbitrary data that is passed to the depositCallback function\",\"delBase\":\"Amount of base tokens to deposit\",\"delQuote\":\"Amount of quote tokens to deposit\",\"recipient\":\"Recipient margin account of the deposited tokens\"}},\"remove(bytes32,uint256)\":{\"params\":{\"delLiquidity\":\"Amount of liquidity to remove\",\"poolId\":\"Keccak256 hash of engine address, strike, sigma, maturity, and gamma\"},\"returns\":{\"delBase\":\"    Amount of base tokens received from removed liquidity\",\"delQuote\":\"     Amount of quote tokens received from removed liquidity\"}},\"swap(address,bytes32,bool,uint256,uint256,bool,bool,bytes)\":{\"params\":{\"data\":\"Arbitrary data that is passed to the swapCallback function\",\"deltaIn\":\"Amount of tokens to swap in\",\"deltaOut\":\"Amount of tokens to swap out\",\"fromMargin\":\"Whether the `msg.sender` uses their margin balance, or must send tokens\",\"poolId\":\"Keccak256 hash of engine address, strike, sigma, maturity, and gamma\",\"quoteForBase\":\"If true, swap quote to base, else swap base to quote\",\"recipient\":\"Address that receives output token `deltaOut` amount\",\"toMargin\":\"Whether the `deltaOut` amount is transferred or deposited into margin\"}},\"updateLastTimestamp(bytes32)\":{\"params\":{\"poolId\":\"Keccak256 hash of engine address, strike, sigma, maturity, and gamma\"},\"returns\":{\"lastTimestamp\":\"Timestamp loaded into the state of the pool's Calibration.lastTimestamp\"}},\"withdraw(address,uint256,uint256)\":{\"params\":{\"delBase\":\"Amount of base tokens to withdraw\",\"delQuote\":\"Amount of quote tokens to withdraw\",\"recipient\":\"Address that tokens are transferred to\"}}},\"title\":\"Action functions for the Engine contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allocate(bytes32,address,uint256,uint256,bool,bytes)\":{\"notice\":\"Allocates quote and base tokens to a specific curve with `poolId`\"},\"create(uint128,uint32,uint32,uint32,uint256,uint256,bytes)\":{\"notice\":\"Initializes a curve with parameters in the `calibrations` storage mapping in the Engine\"},\"deposit(address,uint256,uint256,bytes)\":{\"notice\":\"Adds quote and/or base tokens to a `recipient`'s internal balance account\"},\"remove(bytes32,uint256)\":{\"notice\":\"Unallocates quote and base tokens from a specific curve with `poolId`\"},\"swap(address,bytes32,bool,uint256,uint256,bool,bool,bytes)\":{\"notice\":\"Swaps between `quote` and `base` tokens\"},\"updateLastTimestamp(bytes32)\":{\"notice\":\"Updates the time until expiry of the pool by setting its last timestamp value\"},\"withdraw(address,uint256,uint256)\":{\"notice\":\"Removes quote and/or base tokens from a `msg.sender`'s internal balance account\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/market/IMarketActions.sol\":\"IMarketActions\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":ds-test/=lib/solmate/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":solmate/=lib/solmate/src/\",\":solstat/=lib/solstat/src/\"]},\"sources\":{\"src/interfaces/market/IMarketActions.sol\":{\"keccak256\":\"0xfef4ce5fe242f0d0ecc84ce670d2f299808ed0fea448f205384be73b8ba22640\",\"license\":\"GPL-3.0-only\",\"urls\":[\"bzz-raw://32f2e33aed98793d997433784c191d3f121949fe72ed70076dc9b5b1d4311c1b\",\"dweb:/ipfs/QmegX351YQGTKuBqJVcPySCEZHGgfR7SfHLRvYsPqr28Jg\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.20+commit.a1b79de6"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"bytes32","name":"poolId","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"delQuote","type":"uint256"},{"internalType":"uint256","name":"delBase","type":"uint256"},{"internalType":"bool","name":"fromMargin","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"allocate","outputs":[{"internalType":"uint256","name":"delLiquidity","type":"uint256"}]},{"inputs":[{"internalType":"uint128","name":"strike","type":"uint128"},{"internalType":"uint32","name":"sigma","type":"uint32"},{"internalType":"uint32","name":"maturity","type":"uint32"},{"internalType":"uint32","name":"gamma","type":"uint32"},{"internalType":"uint256","name":"quotePerBase","type":"uint256"},{"internalType":"uint256","name":"delLiquidity","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"create","outputs":[{"internalType":"bytes32","name":"poolId","type":"bytes32"},{"internalType":"uint256","name":"delQuote","type":"uint256"},{"internalType":"uint256","name":"delBase","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"delQuote","type":"uint256"},{"internalType":"uint256","name":"delBase","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"deposit"},{"inputs":[{"internalType":"bytes32","name":"poolId","type":"bytes32"},{"internalType":"uint256","name":"delLiquidity","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"remove","outputs":[{"internalType":"uint256","name":"delQuote","type":"uint256"},{"internalType":"uint256","name":"delBase","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"bytes32","name":"poolId","type":"bytes32"},{"internalType":"bool","name":"quoteForBase","type":"bool"},{"internalType":"uint256","name":"deltaIn","type":"uint256"},{"internalType":"uint256","name":"deltaOut","type":"uint256"},{"internalType":"bool","name":"fromMargin","type":"bool"},{"internalType":"bool","name":"toMargin","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"swap"},{"inputs":[{"internalType":"bytes32","name":"poolId","type":"bytes32"}],"stateMutability":"nonpayable","type":"function","name":"updateLastTimestamp","outputs":[{"internalType":"uint32","name":"lastTimestamp","type":"uint32"}]},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"delQuote","type":"uint256"},{"internalType":"uint256","name":"delBase","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"withdraw"}],"devdoc":{"kind":"dev","methods":{"allocate(bytes32,address,uint256,uint256,bool,bytes)":{"params":{"data":"Arbitrary data that is passed to the allocateCallback function","delBase":"Amount of base tokens to add","delQuote":"Amount of quote tokens to add","fromMargin":"Whether the `msg.sender` pays with their margin balance, or must send tokens","poolId":"Keccak256 hash of engine address, strike, sigma, maturity, and gamma","recipient":"Address to give the allocated liquidity to"},"returns":{"delLiquidity":"Amount of liquidity given to `recipient`"}},"create(uint128,uint32,uint32,uint32,uint256,uint256,bytes)":{"params":{"data":"Arbitrary data that is passed to the createCallback function","delLiquidity":"Amount of liquidity units to allocate to the curve, wei value with 18 decimals of precision","gamma":"Multiplied against swap in amounts to apply fee, equal to 1 - fee % but units are in basis points, valid for (9_000, 10_000)","maturity":"Timestamp which starts the BUFFER countdown until swaps will cease, in seconds, valid for (block.timestamp, 2^32-1]","quotePerBase":"quote reserve per liq. with quote decimals, = 1 - N(d1), d1 = (ln(S/K)+(r*σ^2/2))/σ√τ, valid for [0, 1e^(quote token decimals))","sigma":"AKA Implied Volatility in basis points, determines the price impact of swaps, valid for (1, 10_000_000)","strike":"Marginal price of the pool's quote token at maturity, with the same decimals as the base token, valid [0, 2^128-1]"},"returns":{"delBase":"  Total amount of base tokens provided to reserves","delQuote":"   Total amount of quote tokens provided to reserves","poolId":"     Keccak256 hash of engine address, strike, sigma, maturity, and gamma"}},"deposit(address,uint256,uint256,bytes)":{"params":{"data":"Arbitrary data that is passed to the depositCallback function","delBase":"Amount of base tokens to deposit","delQuote":"Amount of quote tokens to deposit","recipient":"Recipient margin account of the deposited tokens"}},"remove(bytes32,uint256)":{"params":{"delLiquidity":"Amount of liquidity to remove","poolId":"Keccak256 hash of engine address, strike, sigma, maturity, and gamma"},"returns":{"delBase":"    Amount of base tokens received from removed liquidity","delQuote":"     Amount of quote tokens received from removed liquidity"}},"swap(address,bytes32,bool,uint256,uint256,bool,bool,bytes)":{"params":{"data":"Arbitrary data that is passed to the swapCallback function","deltaIn":"Amount of tokens to swap in","deltaOut":"Amount of tokens to swap out","fromMargin":"Whether the `msg.sender` uses their margin balance, or must send tokens","poolId":"Keccak256 hash of engine address, strike, sigma, maturity, and gamma","quoteForBase":"If true, swap quote to base, else swap base to quote","recipient":"Address that receives output token `deltaOut` amount","toMargin":"Whether the `deltaOut` amount is transferred or deposited into margin"}},"updateLastTimestamp(bytes32)":{"params":{"poolId":"Keccak256 hash of engine address, strike, sigma, maturity, and gamma"},"returns":{"lastTimestamp":"Timestamp loaded into the state of the pool's Calibration.lastTimestamp"}},"withdraw(address,uint256,uint256)":{"params":{"delBase":"Amount of base tokens to withdraw","delQuote":"Amount of quote tokens to withdraw","recipient":"Address that tokens are transferred to"}}},"version":1},"userdoc":{"kind":"user","methods":{"allocate(bytes32,address,uint256,uint256,bool,bytes)":{"notice":"Allocates quote and base tokens to a specific curve with `poolId`"},"create(uint128,uint32,uint32,uint32,uint256,uint256,bytes)":{"notice":"Initializes a curve with parameters in the `calibrations` storage mapping in the Engine"},"deposit(address,uint256,uint256,bytes)":{"notice":"Adds quote and/or base tokens to a `recipient`'s internal balance account"},"remove(bytes32,uint256)":{"notice":"Unallocates quote and base tokens from a specific curve with `poolId`"},"swap(address,bytes32,bool,uint256,uint256,bool,bool,bytes)":{"notice":"Swaps between `quote` and `base` tokens"},"updateLastTimestamp(bytes32)":{"notice":"Updates the time until expiry of the pool by setting its last timestamp value"},"withdraw(address,uint256,uint256)":{"notice":"Removes quote and/or base tokens from a `msg.sender`'s internal balance account"}},"version":1}},"settings":{"remappings":["ds-test/=lib/solmate/lib/ds-test/src/","forge-std/=lib/forge-std/src/","solmate/=lib/solmate/src/","solstat/=lib/solstat/src/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/interfaces/market/IMarketActions.sol":"IMarketActions"},"evmVersion":"paris","libraries":{}},"sources":{"src/interfaces/market/IMarketActions.sol":{"keccak256":"0xfef4ce5fe242f0d0ecc84ce670d2f299808ed0fea448f205384be73b8ba22640","urls":["bzz-raw://32f2e33aed98793d997433784c191d3f121949fe72ed70076dc9b5b1d4311c1b","dweb:/ipfs/QmegX351YQGTKuBqJVcPySCEZHGgfR7SfHLRvYsPqr28Jg"],"license":"GPL-3.0-only"}},"version":1},"id":14}